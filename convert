#!/usr/bin/env python

from PIL import Image, ImageColor, ImagePalette
import os, sys
from math import floor, sqrt 
from time import time

def main():
    start_time = time()
    # check arguments
    if len(sys.argv) != 3 and len(sys.argv) != 4:
        print('Invalid number of arguments!')
        quit()

    if os.path.isfile(f'{sys.argv[1]}') != True:
        print(f'Image "{sys.argv[1]}" does not exist!')
        quit()

    if os.path.isfile(f'palettes/{sys.argv[2]}.py') != True:
        print(f'Palette "{sys.argv[2]}" does not exist!')
        quit()

    # open image and load pixel map
    image = Image.open(f'{sys.argv[1]}')
    if image.mode != 'RGB':
        image = image.convert('RGB')
    pxl_map = image.load()

    # import palette in RGB
    palette_hex = __import__(f'palettes.{sys.argv[2]}', globals(), locals(), ['palette'], 0).palette
    palette_rgb = []
    for i in palette_hex:
        palette_rgb.append(ImageColor.getrgb(i))

    # replace pixels with color from palette
    def distance(a, b):
        d = 0
        for i in range(3):
            d += (a[i]-b[i])**2
        return d
    
    # make b have the brightness of a
    def adjust_brightness(a, b):
        target_brightness = sqrt(a[0]**2 + a[1]**2 + a[2]**2)
        if target_brightness == 0:
            return (0, 0, 0,)
        current_brightness = sqrt(b[0]**2 + b[1]**2 + b[2]**2)
        ratio = target_brightness / current_brightness
        return tuple([round(min(channel * ratio, 255)) for channel in b])

    size = image.size[0]*image.size[1]
    for x in range(image.size[0]):
        for y in range(image.size[1]):
            pxl = image.getpixel((x, y))
            d_min = 3*255**2
            best_rgb = palette_rgb[0]
            for rgb in palette_rgb:
                d_new = distance(pxl, rgb)
                if d_new < d_min:
                    d_min = d_new
                    best_rgb = rgb
            pxl_map[x, y] = adjust_brightness(pxl, best_rgb)
        print(f'Converting... {floor(x*(image.size[1]+1)*100/size)}%', end='\r', flush=True)
    print(f'Converting... Done!({round(time()-start_time, 1)}s)')

    # save output
    if len(sys.argv) == 4:
        output_file = f'{sys.argv[3]}'
    else:
        output_file = f'{os.path.splitext(sys.argv[1])[0]}_{sys.argv[2]}{os.path.splitext(sys.argv[1])[1]}'

    image.save(output_file)
    print(f'Converted image saved to "{output_file}"')

if __name__ == '__main__':
    main()

